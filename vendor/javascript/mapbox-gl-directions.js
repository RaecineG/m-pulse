import{applyMiddleware as t,createStore as e,bindActionCreators as i}from"redux";import n from"redux-thunk";import{decode as o}from"polyline";import r from"deep-assign";import s from"suggestions";import a from"lodash.debounce";import c from"xtend";import{EventEmitter as u}from"events";import d from"lodash.template";import l from"lodash.isequal";import p from"turf-extent";function validCoords(t){return t[0]>=-180&&t[0]<=180&&t[1]>=-90&&t[1]<=90}function coordinateMatch(t,e){t=t.geometry.coordinates;e=e.geometry.coordinates;return t.join()===e.join()||t[0].toFixed(3)===e[0].toFixed(3)&&t[1].toFixed(3)===e[1].toFixed(3)}function wrap(t){var e=180- -180;var i=((t- -180)%e+e)%e+-180;return-180===i?180:i}function createPoint(t,e){return{type:"Feature",geometry:{type:"Point",coordinates:t},properties:e||{}}}const h={duration(t){var e=Math.floor(t/60),i=Math.floor(e/60);t%=60;e%=60;return 0===i&&0===e?t+"s":0===i?e+"min":i+"h "+e+"min"},imperial(t){var e=t/1609.344;return e>=100?e.toFixed(0)+"mi":e>=10?e.toFixed(1)+"mi":e>=.1?e.toFixed(2)+"mi":(5280*e).toFixed(0)+"ft"},metric(t){return t>=1e5?(t/1e3).toFixed(0)+"km":t>=1e4?(t/1e3).toFixed(1)+"km":t>=100?(t/1e3).toFixed(2)+"km":t.toFixed(0)+"m"}};var m={format:h,coordinateMatch:coordinateMatch,createPoint:createPoint,validCoords:validCoords,wrap:wrap};const g="DESTINATION";const y="DESTINATION_CLEAR";const f="DESTINATION_QUERY";const v="DESTINATION_FROM_COORDINATES";const _="DIRECTIONS";const b="DIRECTIONS_PROFILE";const D="EVENTS";const E="ERROR";const O="HOVER_MARKER";const x="ORIGIN";const C="ORIGIN_CLEAR";const I="ORIGIN_QUERY";const w="ORIGIN_FROM_COORDINATES";const S="ROUTE_INDEX";const k="SET_OPTIONS";const q="WAYPOINTS";const T={api:"https://api.mapbox.com/v4/directions/",profile:"driving",unit:"imperial",proximity:false,styles:[],controls:{inputs:true,instructions:true},geocoder:{},interactive:true,events:{},origin:{},destination:{},hoverMarker:{},waypoints:[],originQuery:null,destinationQuery:null,originQueryCoordinates:null,destinationQueryCoordinates:null,directions:[],routeIndex:0};function data(t=T,e){switch(e.type){case k:return r({},t,e.options);case b:return Object.assign({},t,{profile:e.profile});case x:return Object.assign({},t,{origin:e.origin,hoverMarker:{}});case g:return Object.assign({},t,{destination:e.destination,hoverMarker:{}});case O:return Object.assign({},t,{hoverMarker:e.hoverMarker});case q:return Object.assign({},t,{waypoints:e.waypoints});case I:return Object.assign({},t,{originQuery:e.query});case f:return Object.assign({},t,{destinationQuery:e.query});case w:return Object.assign({},t,{originQueryCoordinates:e.coordinates});case v:return Object.assign({},t,{destinationQueryCoordinates:e.coordinates});case C:return Object.assign({},t,{origin:{},originQuery:"",waypoints:[],directions:[]});case y:return Object.assign({},t,{destination:{},destinationQuery:"",waypoints:[],directions:[]});case _:return Object.assign({},t,{directions:e.directions});case S:return Object.assign({},t,{routeIndex:e.routeIndex});case E:return Object.assign({},t,{error:e.error});default:return t}}const M=new XMLHttpRequest;function originPoint(t){return e=>{const i=m.createPoint(t,{id:"origin","marker-symbol":"A"});e({type:x,origin:i});e(eventEmit("origin",{feature:i}))}}function destinationPoint(t){return e=>{const i=m.createPoint(t,{id:"destination","marker-symbol":"B"});e({type:g,destination:i});e(eventEmit("destination",{feature:i}))}}function setDirections(t){return e=>{e({type:_,directions:t});e(eventEmit("route",{route:t}))}}function updateWaypoints(t){return{type:q,waypoints:t}}function setHoverMarker(t){return{type:O,hoverMarker:t}}function fetchDirections(){return(t,e)=>{const{api:i,accessToken:n,routeIndex:o,profile:r}=e();const s=buildDirectionsQuery(e);var a=[];a.push("geometry=polyline");a.push("instructions=text");a.push("alternatives=true");a.push("steps=true");a.push("access_token="+n);M.abort();M.open("GET",`${i}mapbox.${r}/${s}.json?${a.join("&")}`,true);M.onload=()=>{if(!(M.status>=200&&M.status<400)){t(setDirections([]));return t(setError(JSON.parse(M.responseText).message))}var e=JSON.parse(M.responseText);if(e.error){t(setDirections([]));return t(setError(e.error))}t(setError(null));e.routes[o]||t(setRouteIndex(0));t(setDirections(e.routes));t(originPoint(e.origin.geometry.coordinates));t(destinationPoint(e.destination.geometry.coordinates))};M.onerror=()=>{t(setDirections([]));return t(setError(JSON.parse(M.responseText).message))};M.send()}}function buildDirectionsQuery(t){const{origin:e,destination:i,waypoints:n}=t();let o=[];o=o.concat(e.geometry.coordinates);o.push(";");n.length&&n.forEach(t=>{o=o.concat(t.geometry.coordinates);o.push(";")});o=o.concat(i.geometry.coordinates);return encodeURIComponent(o.join())}function normalizeWaypoint(t){const e={id:"waypoint"};return Object.assign(t,{properties:t.properties?Object.assign(t.properties,e):e})}function setError(t){return e=>{e({type:"ERROR",error:t});t&&e(eventEmit("error",{error:t}))}}function queryOrigin(t){return{type:I,query:t}}function queryDestination(t){return{type:f,query:t}}function queryOriginCoordinates(t){return{type:w,coordinates:t}}function queryDestinationCoordinates(t){return{type:v,coordinates:t}}function clearOrigin(){return t=>{t({type:C});t(eventEmit("clear",{type:"origin"}));t(setError(null))}}function clearDestination(){return t=>{t({type:y});t(eventEmit("clear",{type:"destination"}));t(setError(null))}}function setOptions(t){return{type:k,options:t}}function hoverMarker(t){return e=>{const i=t?m.createPoint(t,{id:"hover"}):{};e(setHoverMarker(i))}}function setRouteIndex(t){return{type:S,routeIndex:t}}function createOrigin(t){return(e,i)=>{const{destination:n}=i();e(originPoint(t));n.geometry&&e(fetchDirections())}}function createDestination(t){return(e,i)=>{const{origin:n}=i();e(destinationPoint(t));n.geometry&&e(fetchDirections())}}function setProfile(t){return(e,i)=>{const{origin:n,destination:o}=i();e({type:b,profile:t});e(eventEmit("profile",{profile:t}));n.geometry&&o.geometry&&e(fetchDirections())}}function reverse(){return(t,e)=>{const i=e();i.destination.geometry&&t(originPoint(i.destination.geometry.coordinates));i.origin.geometry&&t(destinationPoint(i.origin.geometry.coordinates));i.origin.geometry&&i.destination.geometry&&t(fetchDirections())}}function setOriginFromCoordinates(t){return e=>{m.validCoords(t)||(t=[m.wrap(t[0]),m.wrap(t[1])]);if(isNaN(t[0])&&isNaN(t[1]))return e(setError(new Error("Coordinates are not valid")));e(queryOriginCoordinates(t));e(createOrigin(t))}}function setDestinationFromCoordinates(t){return e=>{m.validCoords(t)||(t=[m.wrap(t[0]),m.wrap(t[1])]);if(isNaN(t[0])&&isNaN(t[1]))return e(setError(new Error("Coordinates are not valid")));e(createDestination(t));e(queryDestinationCoordinates(t))}}function addWaypoint(t,e){return(i,n)=>{let{destination:o,waypoints:r}=n();r.splice(t,0,normalizeWaypoint(e));i(updateWaypoints(r));o.geometry&&i(fetchDirections())}}function setWaypoint(t,e){return(i,n)=>{let{destination:o,waypoints:r}=n();r[t]=normalizeWaypoint(e);i(updateWaypoints(r));o.geometry&&i(fetchDirections())}}function removeWaypoint(t){return(e,i)=>{let{destination:n,waypoints:o}=i();o=o.filter(e=>!m.coordinateMatch(e,t));e(updateWaypoints(o));n.geometry&&e(fetchDirections())}}function eventSubscribe(t,e){return(i,n)=>{const{events:o}=n();o[t]=o[t]||[];o[t].push(e);return{type:D,events:o}}}function eventEmit(t,e){return(i,n)=>{const{events:o}=n();if(!o[t])return{type:D,events:o};const r=o[t].slice();for(var s=0;s<r.length;s++)r[s].call(this,e)}}var R=Object.freeze({__proto__:null,[Symbol.toStringTag]:"Module",queryOrigin:queryOrigin,queryDestination:queryDestination,queryOriginCoordinates:queryOriginCoordinates,queryDestinationCoordinates:queryDestinationCoordinates,clearOrigin:clearOrigin,clearDestination:clearDestination,setOptions:setOptions,hoverMarker:hoverMarker,setRouteIndex:setRouteIndex,createOrigin:createOrigin,createDestination:createDestination,setProfile:setProfile,reverse:reverse,setOriginFromCoordinates:setOriginFromCoordinates,setDestinationFromCoordinates:setDestinationFromCoordinates,addWaypoint:addWaypoint,setWaypoint:setWaypoint,removeWaypoint:removeWaypoint,eventSubscribe:eventSubscribe,eventEmit:eventEmit});const N=[{id:"directions-route-line-alt",type:"line",source:"directions",layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#bbb","line-width":4},filter:["all",["in","$type","LineString"],["in","route","alternate"]]},{id:"directions-route-line",type:"line",source:"directions",layout:{"line-cap":"round","line-join":"round"},paint:{"line-color":"#3bb2d0","line-width":4},filter:["all",["in","$type","LineString"],["in","route","selected"]]},{id:"directions-hover-point-casing",type:"circle",source:"directions",paint:{"circle-radius":8,"circle-color":"#fff"},filter:["all",["in","$type","Point"],["in","id","hover"]]},{id:"directions-hover-point",type:"circle",source:"directions",paint:{"circle-radius":6,"circle-color":"#3bb2d0"},filter:["all",["in","$type","Point"],["in","id","hover"]]},{id:"directions-waypoint-point-casing",type:"circle",source:"directions",paint:{"circle-radius":8,"circle-color":"#fff"},filter:["all",["in","$type","Point"],["in","id","waypoint"]]},{id:"directions-waypoint-point",type:"circle",source:"directions",paint:{"circle-radius":6,"circle-color":"#8a8bc9"},filter:["all",["in","$type","Point"],["in","id","waypoint"]]},{id:"directions-origin-point",type:"circle",source:"directions",paint:{"circle-radius":18,"circle-color":"#3bb2d0"},filter:["all",["in","$type","Point"],["in","marker-symbol","A"]]},{id:"directions-origin-label",type:"symbol",source:"directions",layout:{"text-field":"A","text-font":["Open Sans Bold","Arial Unicode MS Bold"],"text-size":12},paint:{"text-color":"#fff"},filter:["all",["in","$type","Point"],["in","marker-symbol","A"]]},{id:"directions-destination-point",type:"circle",source:"directions",paint:{"circle-radius":18,"circle-color":"#8a8bc9"},filter:["all",["in","$type","Point"],["in","marker-symbol","B"]]},{id:"directions-destination-label",type:"symbol",source:"directions",layout:{"text-field":"B","text-font":["Open Sans Bold","Arial Unicode MS Bold"],"text-size":12},paint:{"text-color":"#fff"},filter:["all",["in","$type","Point"],["in","marker-symbol","B"]]}];"use strict";var L="https://api.mapbox.com/geocoding/v5/mapbox.places/";function Geocoder(t){this._ev=new u;this.options=c({},this.options,t)}Geocoder.prototype={options:{placeholder:"Search",zoom:16,flyTo:true},onAdd:function(t){this._map=t;this.request=new XMLHttpRequest;var e=document.createElement("div");e.className="mapboxgl-ctrl-geocoder";var i=document.createElement("span");i.className="geocoder-icon geocoder-icon-search";var n=this._inputEl=document.createElement("input");n.type="text";n.placeholder=this.options.placeholder;n.addEventListener("keydown",a(function(t){if(!t.target.value)return this._clearEl.classList.remove("active");t.metaKey||-1!==[9,27,37,39,13,38,40].indexOf(t.keyCode)||this._queryFromInput(t.target.value)}.bind(this)),200);n.addEventListener("change",function(e){e.target.value&&this._clearEl.classList.add("active");var i=this._typeahead.selected;if(i){if(this.options.flyTo)if(i.bbox&&i.context&&i.context.length<=3||i.bbox&&!i.context){var n=i.bbox;t.fitBounds([[n[0],n[1]],[n[2],n[3]]])}else t.flyTo({center:i.center,zoom:this.options.zoom});this._input=i;this.fire("result",{result:i})}}.bind(this));var o=document.createElement("div");o.classList.add("geocoder-pin-right");var r=this._clearEl=document.createElement("button");r.className="geocoder-icon geocoder-icon-close";r.addEventListener("click",this._clear.bind(this));var c=this._loadingEl=document.createElement("span");c.className="geocoder-icon geocoder-icon-loading";o.appendChild(r);o.appendChild(c);e.appendChild(i);e.appendChild(n);e.appendChild(o);this.options.container&&(this.options.position=false);this._typeahead=new s(n,[],{filter:false});this._typeahead.getItemValue=function(t){return t.place_name};return e},_geocode:function(t,e){this._loadingEl.classList.add("active");this.fire("loading");var i=[];this.options.proximity&&i.push("proximity="+this.options.proximity.join());this.options.bbox&&i.push("bbox="+this.options.bbox.join());this.options.country&&i.push("country="+this.options.country);this.options.types&&i.push("types="+this.options.types);var n=this.options.accessToken?this.options.accessToken:mapboxgl.accessToken;i.push("access_token="+n);this.request.abort();this.request.open("GET",L+encodeURIComponent(t.trim())+".json?"+i.join("&"),true);this.request.onload=function(){this._loadingEl.classList.remove("active");if(this.request.status>=200&&this.request.status<400){var t=JSON.parse(this.request.responseText);if(t.features.length)this._clearEl.classList.add("active");else{this._clearEl.classList.remove("active");this._typeahead.selected=null}this.fire("results",{results:t.features});this._typeahead.update(t.features);return e(t.features)}this.fire("error",{error:JSON.parse(this.request.responseText).message})}.bind(this);this.request.onerror=function(){this._loadingEl.classList.remove("active");this.fire("error",{error:JSON.parse(this.request.responseText).message})}.bind(this);this.request.send()},_queryFromInput:function(t){t=t.trim();t||this._clear();t.length>2&&this._geocode(t,function(t){this._results=t}.bind(this))},_change:function(){var t=document.createEvent("HTMLEvents");t.initEvent("change",true,false);this._inputEl.dispatchEvent(t)},_query:function(t){if(t){"object"===typeof t&&t.length&&(t=[m.wrap(t[0]),m.wrap(t[1])].join());this._geocode(t,function(t){if(t.length){var e=t[0];this._results=t;this._typeahead.selected=e;this._inputEl.value=e.place_name;this._change()}}.bind(this))}},_setInput:function(t){if(t){"object"===typeof t&&t.length&&(t=[m.wrap(t[0]),m.wrap(t[1])].join());this._inputEl.value=t;this._input=null;this._typeahead.selected=null;this._typeahead.clear();this._change()}},_clear:function(){this._input=null;this._inputEl.value="";this._typeahead.selected=null;this._typeahead.clear();this._change();this._inputEl.focus();this._clearEl.classList.remove("active");this.fire("clear")},getResult:function(){return this._input},query:function(t){this._query(t);return this},setInput:function(t){this._setInput(t);return this},on:function(t,e){this._ev.on(t,e);return this},fire:function(t,e){this._ev.emit(t,e);return this},off:function(t,e){this._ev.removeListener(t,e);return this}};module.exports=Geocoder;let F=require("fs");let P=d(F.readFileSync(__dirname+"/../templates/inputs.html","utf8"));class Inputs{constructor(t,e,i,n){const{originQuery:o,destinationQuery:r,profile:s}=e.getState();t.innerHTML=P({originQuery:o,destinationQuery:r,profile:s});this.container=t;this.actions=i;this.store=e;this._map=n;this.onAdd();this.render()}animateToCoordinates(t,e){const{origin:i,destination:n}=this.store.getState();if(i.geometry&&n.geometry&&!l(i.geometry,n.geometry)){const t=p({type:"FeatureCollection",features:[i,n]});this._map.fitBounds([[t[0],t[1]],[t[2],t[3]]],{padding:80})}else this._map.flyTo({center:e})}onAdd(){const{clearOrigin:t,clearDestination:e,createOrigin:i,createDestination:n,setProfile:o,reverse:r}=this.actions;const{geocoder:s,accessToken:a}=this.store.getState();this.originInput=new _missingExportShim(Object.assign({},{flyTo:false,placeholder:"Choose a starting place",accessToken:a},s));var c=this.originInput.onAdd();var u=this.container.querySelector("#mapbox-directions-origin-input");u.appendChild(c);this.destinationInput=new _missingExportShim(Object.assign({},{flyTo:false,placeholder:"Choose destination",accessToken:a},s));var d=this.destinationInput.onAdd();this.container.querySelector("#mapbox-directions-destination-input").appendChild(d);this.originInput.on("result",t=>{const e=t.result.center;i(e);this.animateToCoordinates("origin",e)});this.originInput.on("clear",t);this.destinationInput.on("result",t=>{const e=t.result.center;n(e);this.animateToCoordinates("destination",e)});this.destinationInput.on("clear",e);const l=this.container.querySelectorAll('input[type="radio"]');Array.prototype.forEach.call(l,t=>{t.addEventListener("change",()=>{o(t.id.split("-").pop())})});this.container.querySelector(".js-reverse-inputs").addEventListener("click",()=>{const{origin:t,destination:e}=this.store.getState();t&&this.actions.queryDestination(t.geometry.coordinates);e&&this.actions.queryOrigin(e.geometry.coordinates);r()})}render(){this.store.subscribe(()=>{const{originQuery:t,destinationQuery:e,originQueryCoordinates:i,destinationQueryCoordinates:n}=this.store.getState();if(t){this.originInput.query(t);this.actions.queryOrigin(null)}if(e){this.destinationInput.query(e);this.actions.queryDestination(null)}if(i){this.originInput.setInput(i);this.animateToCoordinates("origin",i);this.actions.queryOriginCoordinates(null)}if(n){this.destinationInput.setInput(n);this.animateToCoordinates("destination",n);this.actions.queryDestinationCoordinates(null)}})}}let j=require("fs");let A=d(j.readFileSync(__dirname+"/../templates/instructions.html","utf8"));let W=d(j.readFileSync(__dirname+"/../templates/error.html","utf8"));class Instructions{constructor(t,e,i,n){this.container=t;this.actions=i;this.store=e;this._map=n;this.directions={};this.render()}render(){this.store.subscribe(()=>{const{hoverMarker:t,setRouteIndex:e}=this.actions;const{routeIndex:i,unit:n,directions:o,error:r}=this.store.getState();const s=!l(o[i],this.directions);if(r)this.container.innerHTML=W({error:r});else if(o.length&&s){const r=this.directions=o[i];this.container.innerHTML=A({routeIndex:i,routes:o.length,steps:r.steps,format:m.format[n],duration:m.format[n](r.distance),distance:m.format.duration(r.duration)});const s=this.container.querySelectorAll(".mapbox-directions-step");Array.prototype.forEach.call(s,e=>{const i=e.getAttribute("data-lng");const n=e.getAttribute("data-lat");e.addEventListener("mouseover",()=>{t([i,n])});e.addEventListener("mouseout",()=>{t(null)});e.addEventListener("click",()=>{this._map.flyTo({center:[i,n],zoom:16})})});const a=this.container.querySelectorAll('input[type="radio"]');Array.prototype.forEach.call(a,t=>{t.addEventListener("change",t=>{e(parseInt(t.target.id,10))})})}else this.container.innerHTML&&s&&(this.container.innerHTML="")})}}const Q=t(n)(e);const U=Q(data);class MapboxDirections{constructor(t){this.actions=i(R,U.dispatch);this.actions.setOptions(t||{});this.options=t||{};this.onDragDown=this._onDragDown.bind(this);this.onDragMove=this._onDragMove.bind(this);this.onDragUp=this._onDragUp.bind(this);this.move=this._move.bind(this);this.onClick=this._onClick.bind(this)}onAdd(t){this._map=t;const{controls:e}=U.getState();var i=this.container=document.createElement("div");i.className="mapboxgl-ctrl-directions mapboxgl-ctrl";const n=document.createElement("div");n.className="directions-control directions-control-inputs";new Inputs(n,U,this.actions,this._map);const o=document.createElement("div");o.className="directions-control directions-control-instructions";new Instructions(o,U,{hoverMarker:this.actions.hoverMarker,setRouteIndex:this.actions.setRouteIndex},this._map);e.inputs&&i.appendChild(n);e.instructions&&i.appendChild(o);this.subscribedActions();this._map.loaded()?this.mapState():this._map.on("load",()=>this.mapState());return i}onRemove(t){this.container.parentNode.removeChild(this.container);this.removeRoutes();t.off("mousedown",this.onDragDown);t.off("mousemove",this.move);t.off("touchstart",this.onDragDown);t.off("touchstart",this.move);t.off("click",this.onClick);this._map=null;return this}mapState(){const{profile:t,styles:e,interactive:i}=U.getState();this.actions.eventEmit("profile",{profile:t});const n={type:"geojson",data:{type:"FeatureCollection",features:[]}};this._map.addSource("directions",n);N.forEach(t=>this._map.addLayer(t));e&&e.length&&e.forEach(t=>this._map.addLayer(t));if(i){this._map.on("mousedown",this.onDragDown);this._map.on("mousemove",this.move);this._map.on("click",this.onClick);this._map.on("touchstart",this.move);this._map.on("touchstart",this.onDragDown)}}subscribedActions(){U.subscribe(()=>{const{origin:t,destination:e,hoverMarker:i,directions:n,routeIndex:r}=U.getState();const s={type:"FeatureCollection",features:[t,e,i].filter(t=>t.geometry)};n.length&&n.forEach((t,e)=>{const i={geometry:{type:"LineString",coordinates:o(t.geometry,6).map(t=>t.reverse())},properties:{"route-index":e,route:e===r?"selected":"alternate"}};s.features.push(i);e===r&&t.steps.forEach(t=>{"waypoint"===t.maneuver.type&&s.features.push({type:"Feature",geometry:t.maneuver.location,properties:{id:"waypoint"}})})});this._map.style&&this._map.getSource("directions")&&this._map.getSource("directions").setData(s)})}_onClick(t){const{origin:e}=U.getState();const i=[t.lngLat.lng,t.lngLat.lat];if(e.geometry){const e=this._map.queryRenderedFeatures(t.point,{layers:["directions-origin-point","directions-destination-point","directions-waypoint-point","directions-route-line-alt"]});if(e.length){e.forEach(t=>{"directions-waypoint-point"===t.layer.id&&this.actions.removeWaypoint(t)});if("alternate"===e[0].properties.route){const t=e[0].properties["route-index"];this.actions.setRouteIndex(t)}}else{this.actions.setDestinationFromCoordinates(i);this._map.flyTo({center:i})}}else this.actions.setOriginFromCoordinates(i)}_move(t){const{hoverMarker:e}=U.getState();const i=this._map.queryRenderedFeatures(t.point,{layers:["directions-route-line-alt","directions-route-line","directions-origin-point","directions-destination-point","directions-hover-point"]});this._map.getCanvas().style.cursor=i.length?"pointer":"";if(i.length){this.isCursorOverPoint=i[0];this._map.dragPan.disable();i.forEach(i=>{"directions-route-line"===i.layer.id?this.actions.hoverMarker([t.lngLat.lng,t.lngLat.lat]):e.geometry&&this.actions.hoverMarker(null)})}else if(this.isCursorOverPoint){this.isCursorOverPoint=false;this._map.dragPan.enable()}}_onDragDown(){if(this.isCursorOverPoint){this.isDragging=this.isCursorOverPoint;this._map.getCanvas().style.cursor="grab";this._map.on("mousemove",this.onDragMove);this._map.on("mouseup",this.onDragUp);this._map.on("touchmove",this.onDragMove);this._map.on("touchend",this.onDragUp)}}_onDragMove(t){if(!this.isDragging)return;const e=[t.lngLat.lng,t.lngLat.lat];switch(this.isDragging.layer.id){case"directions-origin-point":this.actions.createOrigin(e);break;case"directions-destination-point":this.actions.createDestination(e);break;case"directions-hover-point":this.actions.hoverMarker(e);break}}_onDragUp(){if(!this.isDragging)return;const{hoverMarker:t,origin:e,destination:i}=U.getState();switch(this.isDragging.layer.id){case"directions-origin-point":this.actions.setOriginFromCoordinates(e.geometry.coordinates);break;case"directions-destination-point":this.actions.setDestinationFromCoordinates(i.geometry.coordinates);break;case"directions-hover-point":t.geometry&&!m.coordinateMatch(this.isDragging,t)&&this.actions.addWaypoint(0,t);break}this.isDragging=false;this._map.getCanvas().style.cursor="";this._map.off("touchmove",this.onDragMove);this._map.off("touchend",this.onDragUp);this._map.off("mousemove",this.onDragMove);this._map.off("mouseup",this.onDragUp)}interactive(t){if(t){this._map.on("touchstart",this.move);this._map.on("touchstart",this.onDragDown);this._map.on("mousedown",this.onDragDown);this._map.on("mousemove",this.move);this._map.on("click",this.onClick)}else{this._map.off("touchstart",this.move);this._map.off("touchstart",this.onDragDown);this._map.off("mousedown",this.onDragDown);this._map.off("mousemove",this.move);this._map.off("click",this.onClick)}return this}getOrigin(){return U.getState().origin}setOrigin(t){"string"===typeof t?this.actions.queryOrigin(t):this.actions.setOriginFromCoordinates(t);return this}getDestination(){return U.getState().destination}setDestination(t){"string"===typeof t?this.actions.queryDestination(t):this.actions.setDestinationFromCoordinates(t);return this}reverse(){this.actions.reverse();return this}addWaypoint(t,e){e.type||(e=m.createPoint(e,{id:"waypoint"}));this.actions.addWaypoint(t,e);return this}setWaypoint(t,e){e.type||(e=m.createPoint(e,{id:"waypoint"}));this.actions.setWaypoint(t,e);return this}removeWaypoint(t){const{waypoints:e}=U.getState();this.actions.removeWaypoint(e[t]);return this}getWaypoints(){return U.getState().waypoints}removeRoutes(){this.actions.clearOrigin();this.actions.clearDestination();return this}on(t,e){this.actions.eventSubscribe(t,e);return this}}module.exports=MapboxDirections;

